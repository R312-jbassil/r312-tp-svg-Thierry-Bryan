---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Générateur SVG">
  <div class="h-screen p-4 bg-base-200">
    <!-- Top section: SVG preview and code side by side -->
    <div class="grid grid-cols-2 gap-4 h-2/3 mb-4">
      <!-- Section 1 : Aperçu SVG -->
      <div class="card bg-base-100 shadow-xl">
        <div class="card-body p-0 h-full">
          <div
            id="svg-container"
            class="flex items-center justify-center h-full bg-base-200 rounded-lg"
          >
            <svg width="200" height="200">
              <circle cx="100" cy="100" r="80" fill="#60a5fa"></circle>
            </svg>
          </div>
        </div>
      </div>

      <!-- Section 2 : Code généré -->
      <div class="card bg-base-100 shadow-xl">
        <div class="card-body p-0">
          <div class="mockup-code h-full">
            <pre id="svg-output" data-prefix="$"></pre>
          </div>
        </div>
      </div>
    </div>

    <!-- Bottom section: Prompt input -->
    <div class="h-1/3">
      <div class="card bg-base-100 shadow-xl h-full">
        <div class="card-body">
          <div class="flex gap-4 items-center h-full">
            <textarea
              id="user-prompt"
              class="textarea textarea-bordered flex-1 resize-none"
              placeholder="Décrivez votre SVG..."
              rows="3"></textarea>
            <button id="generate-button" class="btn btn-primary">Générer</button
            >
            <button id="save-button" class="btn btn-sm btn-success" disabled
              >Sauvegarder</button
            >
            <button class="btn btn-secondary m-2" id="edit-button">Edit</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  let promptList = [];
  let currentSVG = ""; // AJOUTER CETTE LIGNE
  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    const data = await res.json();
    return data.svg;
  }

  async function saveSVG(params) {
    try {
      const res = await fetch("/api/saveSVG", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });

      if (!res.ok) {
        throw new Error(`Erreur ${res.status}`);
      }

      return await res.json();
    } catch (error) {
      console.error("Erreur sauvegarde:", error);
      throw error;
    }
  }
  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    const generateButton = document.getElementById("generate-button");

    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);

    // Réinitialiser la liste des prompts pour une nouvelle génération
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    let svgOutput = document.getElementById("svg-output");

    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;

    try {
      // Appeler la fonction pour générer le SVG
      aiResponse = await generateSVG(promptList);

      // aiResponse est déjà le SVG, pas besoin d'extraire
      console.log("svgCode: ", aiResponse);

      // Ajouter la réponse de l'IA à la liste des prompts
      promptList.push({ role: "assistant", content: aiResponse });

      // Afficher le SVG généré
      svgOutput.textContent = aiResponse;
      svgContainer.innerHTML = aiResponse;

      // Stocker pour sauvegarde
      currentSVG = aiResponse;

      // Activer le bouton de sauvegarde
      document.getElementById("save-button").disabled = false;
    } catch (error) {
      console.error("Erreur:", error);
      svgContainer.innerHTML = `<div class="alert alert-error"><span>Erreur: ${error.message}</span></div>`;
    } finally {
      generateButton.disabled = false;
    }
  }
  const editButton = document.getElementById("edit-button");

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");

    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);

    // Ajout du prompt de l'utilisateur à la liste (garde l'historique)
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    let svgOutput = document.getElementById("svg-output");

    // Afficher un spinner de chargement
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    try {
      // Appeler la fonction pour générer le SVG avec tout l'historique
      aiResponse = await generateSVG(promptList);

      console.log("Code SVG généré : ", aiResponse);

      // Ajouter la réponse de l'IA à la liste des prompts
      promptList.push({ role: "assistant", content: aiResponse });

      // Afficher le SVG généré
      svgOutput.textContent = aiResponse;
      svgContainer.innerHTML = aiResponse;

      // Stocker pour sauvegarde
      currentSVG = aiResponse;

      // Activer le bouton de sauvegarde
      document.getElementById("save-button").disabled = false;

      console.log("Historique des prompts : ", promptList);
    } catch (error) {
      console.error("Erreur lors de l'édition:", error);
      svgContainer.innerHTML = `<div class="alert alert-error"><span>Erreur: ${error.message}</span></div>`;
    } finally {
      // Réactiver les boutons
      generateButton.disabled = false;
      editButton.disabled = false;
    }
  }

  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }
  const generateButton = document.getElementById("generate-button");
  if (generateButton) {
    generateButton.addEventListener("click", handleSubmit);
  }

  // Gestion du bouton de sauvegarde
  const saveButton = document.getElementById("save-button");
  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      try {
        // Récupérer les informations de l'utilisateur depuis le localStorage
        const user = JSON.parse(localStorage.getItem("user"));

        // Vérifier que l'utilisateur est connecté
        if (!user || !user.id) {
          alert("Erreur : Utilisateur non connecté");
          return;
        }

        // Demander le nom à l'utilisateur
        const name = prompt("Donnez un nom à votre création :");
        if (!name) return; // Annulé par l'utilisateur

        // Récupérer le code SVG
        const svgOutput = document.getElementById("svg-output")?.textContent;
        console.log("Préparation de la sauvegarde :", svgOutput);

        // Préparer les données selon le format attendu avec l'ID utilisateur
        const params = {
          name: name,
          code_svg: svgOutput || "<svg></svg>",
          chat_history: JSON.stringify(promptList),
          user: user.id, // AJOUT DE L'ID UTILISATEUR
        };

        console.log("Données à sauvegarder :", params);

        // Sauvegarder
        const result = await saveSVG(params);

        if (result.success) {
          alert("SVG sauvegardé avec succès !");
        } else {
          alert(
            "Erreur lors de la sauvegarde : " +
              (result.error || "Erreur inconnue")
          );
        }
      } catch (error) {
        console.error("Erreur complète :", error);
        alert("Erreur lors de la sauvegarde : " + error.message);
      }
    });
  }
</script>
