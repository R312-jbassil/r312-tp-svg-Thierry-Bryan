---
// filepath: c:\Users\bryan\Documents\GitHub\MMI2\r312-tp-svg-Thierry-Bryan\src\pages\gallery\[id].astro
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";

const id = Astro.params.id;
const svg: SvgRecord = await pb.collection(Collections.Svg).getOne(id);
---

<Layout title={`SVG - ${svg.name}`}>
  <div class="grid grid-cols-2 gap-4 p-4 h-screen">
    <!-- Partie 1: Affichage du SVG -->
    <div class="bg-base-100 p-4">
      <h2 class="text-lg font-bold mb-4">SVG</h2>
      <div class="divider"></div>
      <div
        id="svg-container"
        class="flex justify-center items-center h-96 bg-base-200"
      >
        <div set:html={svg.code_svg} />
      </div>
    </div>

    <!-- Partie 2: Zone de chat -->
    <div class="bg-base-100 p-4 flex flex-col relative">
      <h2 class="text-lg font-bold mb-4">Chat</h2>
      <div class="divider"></div>

      <!-- Historique -->
      <div
        id="chat-history"
        class="flex flex-col gap-4 overflow-y-auto flex-grow mb-20"
      >
        {
          JSON.parse(svg.chat_history || "[]").map((msg) => (
            <div
              class={`chat ${msg.role === "user" ? "chat-start" : "chat-end"}`}
            >
              <div
                class={`chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`}
              >
                <pre>{msg.content}</pre>
              </div>
              <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
            </div>
          ))
        }
      </div>

      <!-- Formulaire de chat -->
      <form
        id="input-prompt-form"
        class="flex flex-col gap-2 w-full absolute bottom-0 left-0 right-0 bg-base-300 p-4"
        method="POST"
        autocomplete="off"
      >
        <input
          type="hidden"
          name="history"
          value={JSON.stringify(svg?.chat_history || "[]")}
        />
        <input type="hidden" name="id" value={svg?.id} />
        <div class="flex items-center gap-2">
          <input
            id="prompt-input"
            name="editPrompt"
            type="text"
            class="input flex-grow"
            placeholder="Enter a prompt to edit the SVG..."
          />
          <button class="btn btn-primary" type="submit">Edit</button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  const form = document.getElementById("input-prompt-form");
  const svgPreview = document.getElementById("svg-container");
  const chatHistory = document.getElementById("chat-history");

  // Fonction pour générer le SVG à partir du prompt
  async function generateSVG(promptList) {
    const response = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(promptList),
    });
    const data = await response.json();
    return data.svg;
  }

  // Fonction pour mettre à jour le SVG dans PocketBase
  async function update(updatedData) {
    const response = await fetch("/api/updateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedData),
    });
    return response;
  }

  // Écouteur d'événement pour le formulaire de soumission
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);

    // Dans votre script, modifiez cette partie :
    let prompt = {
      role: "user",
      content: `Current SVG: ${svgPreview.innerHTML}\n\nModification request: ${formData.get("editPrompt")}`,
    };

    // Récupérez l'historique des messages (CORRECTION ICI)
    let historyString = formData.get("history");
    let history = [];

    try {
      history = JSON.parse(historyString || "[]");
      // S'assurer que c'est un tableau
      if (!Array.isArray(history)) {
        history = [];
      }
    } catch (error) {
      console.error("Erreur parsing history:", error);
      history = [];
    }

    history.push(prompt); // Maintenant ça marche

    // Réinitialisez le champ de saisie
    document.getElementById("prompt-input").value = "";

    // Affichez un indicateur de chargement
    svgPreview.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;

    // Ajoutez le prompt à l'historique du chat
    chatHistory.innerHTML += `
      <div class="chat chat-start">
        <div class="chat-bubble bg-primary text-primary-content">
          <pre>${prompt.content}</pre>
        </div>
        <div class="chat-footer opacity-60 text-xs mt-1">user</div>
      </div>
    `;

    try {
      // Appelez la fonction pour générer le SVG
      let aiResponse = await generateSVG(history);
      history.push({ role: "assistant", content: aiResponse });

      // Extraire le SVG de la réponse
      const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
      aiResponse = svgMatch ? svgMatch[0] : "";

      console.log("svgCode: ", aiResponse);

      // Mettez à jour l'affichage du SVG
      svgPreview.innerHTML = aiResponse;

      // Ajoutez le code SVG à l'historique du chat
      chatHistory.innerHTML += `
        <div class="chat chat-end">
          <div class="chat-bubble bg-secondary text-secondary-content">
            <pre>${aiResponse}</pre>
          </div>
          <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
        </div>
      `;

      // Mettre à jour dans PocketBase
      const response = await update({
        id: formData.get("id"),
        code_svg: aiResponse,
        chat_history: JSON.stringify(history),
      });

      const data = await response.json();

      if (data.success) {
        console.log("SVG updated successfully");
      } else {
        console.error("Failed to update SVG:", data.error);
      }
    } catch (error) {
      console.error("Erreur:", error);
      chatHistory.innerHTML += `
        <div class="chat chat-start">
          <div class="chat-bubble bg-error text-error-content">
            <pre>Erreur: ${error.message}</pre>
          </div>
        </div>
      `;
    }

    form.reset();
  });
</script>
