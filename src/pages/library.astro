---
// filepath: c:\Users\bryan\Documents\GitHub\MMI2\r312-tp-svg-Thierry-Bryan\src\pages\library.astro
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
import pb from "../utils/pb.js";
import { Collections } from "../utils/pocketbase-types.js";

const locale = Astro.locals.lang as 'en' | 'fr' ?? 'fr';
const t = ui[locale].library;
const commonT = ui[locale].common;

// Récupère l'utilisateur connecté
const user = Astro.locals.user;

// Récupère les SVG de l'utilisateur connecté
let svgList: any[] = [];
let error: Error | null = null;

if (user) {
  try {
    svgList = await pb.collection(Collections.Svg).getFullList({
      sort: "-created", // Trie les SVGs du plus récent au plus ancien
      filter: `user = "${user.id}"`, // Filtre pour n'afficher que les SVGs de l'utilisateur
    });
    console.log("SVG list for user:", user.email, svgList);
  } catch (err) {
    console.error("Erreur récupération SVG:", err);
    error = err as Error;
  }
}
---

<Layout title={t.title}>
  <meta
    http-equiv="Cache-Control"
    content="no-cache, no-store, must-revalidate"
  />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />
  <div class="min-h-screen p-4 bg-base-200">
    <div class="container mx-auto">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">{t.title}</h1>
        <a href="/generator" class="btn btn-primary">{ui[locale].nav.create}</a>
      </div>

      {
        user && (
          <div class="alert alert-info mb-4">
            <span>
              {t.userLibrary} {user.email} - {svgList.length} {t.personalSVGs}
            </span>
          </div>
        )
      }

      {
        error && (
          <div class="alert alert-error mb-4">
            <span>{ui[locale].errors.loadingError}: {(error as any)?.message || ui[locale].common.error}</span>
          </div>
        )
      }

      {
        svgList.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {svgList.map((svg) => (
              <div class="card bg-base-100 shadow-xl" data-key={svg.id}>
                <div class="card-body">
                  <h2 class="card-title">{svg.name || ui[locale].common.save}</h2>
                  <div class="bg-base-200 p-4 rounded-lg flex justify-center">
                    <div set:html={svg.code_svg} />
                  </div>
                  <p class="text-sm text-gray-500">
                    {t.createdOn} {new Date(svg.created).toLocaleDateString()}
                  </p>
                  <div class="card-actions justify-end">
                    <button
                      class="btn btn-sm btn-outline"
                      onclick={`copySVG('${svg.id}', \`${svg.code_svg.replace(/`/g, "\\`")}\`)`}
                    >
                      {ui[locale].common.copy}
                    </button>
                    <a
                      href={`/gallery/${svg.id}`}
                      class="btn btn-sm btn-primary"
                    >
                      {ui[locale].common.view}/{ui[locale].common.edit}
                    </a>
                    <button
                      class="btn btn-sm btn-error"
                      onclick={`deleteSVG('${svg.id}')`}
                    >
                      {ui[locale].common.delete}
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div class="text-center py-12">
            <h2 class="text-xl text-gray-500 mb-4">{t.noSVG}</h2>
            <a href="/generator" class="btn btn-primary">
              {t.createFirst}
            </a>
          </div>
        )
      }
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck

  window.copySVG = function (id, svgCode) {
    navigator.clipboard
      .writeText(svgCode)
      .then(() => {
        // Toast notification
        const toast = document.createElement("div");
        toast.className = "toast toast-end";
        toast.innerHTML = '<div class="alert alert-success">SVG copié!</div>';
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 2000);
      })
      .catch((err) => {
        console.error("Erreur copie:", err);
        alert("Erreur lors de la copie");
      });
  };

  window.deleteSVG = async function (id) {
    if (confirm("Êtes-vous sûr de vouloir supprimer ce SVG ?")) {
      try {
        const response = await fetch(`/api/deleteSVG`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id }),
        });

        if (response.ok) {
          location.reload();
        } else {
          alert("Erreur lors de la suppression");
        }
      } catch (error) {
        console.error("Erreur suppression:", error);
        alert("Erreur lors de la suppression");
      }
    }
  };
</script>
